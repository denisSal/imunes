#! /bin/sh

command=`basename $0`

help() {
cat <<__END__

Command $command can be used as an interface to the docker command
for virtual nodes. Hostname is used instead of docker name.
Hostname can be in the form: hostname or hostname@eid.

Usage:
  $command node_name command
  $command -b node_name command  ---> run in detached mode (background)
  $command -d                    ---> dummy flag (used only on FreeBSD)
  $command -e node_name          ---> experiment eid name (eid)
  $command -i node_name          ---> container id
  $command -j node_name          ---> container id
  $command -l                    ---> running experiments eids with experiment data
  $command -ln                   ---> running experiments eids with node names
  $command -m node_name command  ---> execute command in experiment master netns
  $command -n node_name          ---> node name (nodename)
  $command -nt node_name command ---> run without pseudo-tty (no-tty)
  $command -v node_name          ---> node full name (eid.nodename)
__END__
}

vi_name() {
	if test "$1" = ""; then
		exit 1
	fi

	if test "`docker ps -q`" = ""; then
		echo Error: cannot find node named $1 >&2
		exit 2
	fi
	dockerps=`docker ps -q | xargs docker inspect -f '{{range $p, $conf := .}} {{if eq $p "Name"}} {{$conf}} {{end}} {{if eq $p "Id"}} {{$conf}} {{end}} {{if eq $p "Config"}} {{$conf.Hostname}} {{end}} {{end}}'`
	host=`echo $1 | cut -d@ -f1`
	if [ -n "`echo $1 | grep "@"`" ]; then
		expid=`echo $1 | cut -d@ -f2`
	fi

	n=`echo "$dockerps" | awk -v h=$host -v e="$expid.n[0-9]+$" '$1 == h && $3 ~ e {print}' | wc -l`
	if test $n -gt 1; then
		echo "Error: $1 is not a unique name." >&2
		echo "It is used (at least) for nodes:" >&2
		echo "$dockerps" | awk -v h=$host -v e="$expid.n[0-9]+$" '$1 == h && $3 ~ e {print}' >&2
		exit 1
	fi
	if test $n -eq 0; then
		get_explist nodes | grep -q $host
		if test $? -ne 0; then
			echo Error: cannot find node named $1 >&2
			exit 2
		else
			echo "Node $host is not a docker container." >&2
			exit 3
		fi
	fi
	echo "$dockerps" | awk -v h=$host -v e="$expid.n[0-9]+$" '$1 == h && $3 ~ e {print $2}'
}

get_explist() {
	jq --version > /dev/null 2>&1
	if test $? -ne 0; then
		echo "Package 'jq' not installed, please install it."
		exit 1
	fi

	for exp_path in /var/run/imunes/*/; do
		exp=$(basename $exp_path)
		if test "$exp" = "*"; then
			continue
		fi

		if test $1 = "nodes"; then
			nodes=`jq -r '.nodes' /var/run/imunes/$exp/config.imn`
			non_running=`grep -Eo 'n[0-9]+_running false' /var/run/imunes/$exp/runningVars | cut -d'_' -f1 | jq -R . | jq -s .`
			if test "$nodes" = "null"; then
				data=""
			else
				data=`jq --argjson nonRunning "$non_running" -r '.nodes | to_entries | map(
					select(.value.type != "pseudo")
					.key as $id |
					.value.name +
					(if $nonRunning | index($id) then "*" else "" end) +
					(if .value == "rj45" then " (" + (.value.ifaces | to_entries | map(.value.name) | join(", ")) + ")" else "" end)
					) | join(", ")' /var/run/imunes/$exp/config.imn`
			fi
		else
			if test -r /var/run/imunes/$exp/name; then
				exp_name=`cat /var/run/imunes/$exp/name`
			else
				exp_name="N/A"
			fi
			exp_timestamp=`cat /var/run/imunes/$exp/timestamp`
			data="$exp_name - $exp_timestamp"
		fi
		echo "$exp [$data]"
	done
}

# dummy flags
if test "$1" = "-d"; then
	shift 1
fi

if test $# -eq 0; then
	help
elif test $1 = "-h"; then
	help
elif test $1 = "-l"; then
	get_explist expdata
elif test $1 = "-ln"; then
	get_explist nodes
elif test $1 = "-j" || test $1 = "-i"; then
	vi_name $2
	test $? -ne 0 && help && exit 2
elif test $1 = "-v"; then
	image_name=`vi_name $2`
	test $? -ne 0 && help && exit 2
	docker inspect -f '{{.Name}}' $image_name | tr -d "/"
elif test $1 = "-e"; then
	image_name=`vi_name $2`
	test $? -ne 0 && help && exit 2
	docker inspect -f '{{.Name}}' $image_name | tr -d "/" | cut -d"." -f1
elif test $1 = "-nt"; then
	image_name=`vi_name $2`
	test $? -ne 0 && help && exit 2
	shift 2
	if test -n "$*"; then
		exec docker exec -i $image_name "$@"
	else
		echo $command: command is missing
		help
		exit 2
	fi
elif test $1 = "-n"; then
	image_name=`vi_name $2`
	test $? -ne 0 && help && exit 2
	docker inspect -f '{{.Name}}' $image_name | cut -d"." -f2
elif test $1 = "-b"; then
	image_name=`vi_name $2`
	test $? -ne 0 && help && exit 2
	shift 2
	if test -n "$*"; then
		exec docker exec -d $image_name "$@"
	else
		echo $command: command is missing
		help
		exit 2
	fi
elif test $1 = "-m"; then
	image_name=`vi_name $2`
	test $? -ne 0 && help && exit 2
	shift 2
	eid=$(docker inspect -f '{{.Name}}' $image_name | tr -d "/" | cut -d"." -f1)
	if test -z "$*"; then
		exec ip netns exec $eid /bin/bash
	fi
	exec ip netns exec $eid "$@"
elif test $1 = "-E"; then
	test -z "$2" && exit 2
	eid=$2
	shift 2
	if test -z "$*"; then
		exec ip netns exec $eid /bin/bash
	fi
	exec ip netns exec $eid "$@"
elif test `expr a$1 : "a-.*"` = "0"; then
	image_name=`vi_name $1`
	test $? -ne 0 && help && exit 2
	shift 1
	if test -z "$*"; then
		exec docker exec -it $image_name /bin/bash
	fi
	if [ -t 0 ]; then
		exec docker exec -it $image_name "$@"
	else
		exec docker exec -i $image_name "$@"
	fi
else
	echo $command: illegal option -- $1
	help
	exit 2
fi
